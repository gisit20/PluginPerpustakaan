/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bits.bee.perpustakaan.ui;

import com.bits.bee.perpustakaan.bl.Member;
import com.bits.bee.perpustakaan.ui.dlg.DlgBook;
import com.bits.bee.ui.UIMgr;
import com.bits.bee.ui.myswing.InternalFrameTrans;
import com.bits.lib.BUtil;
import com.bits.lib.dbswing.BdbState;
import com.bits.lib.dx.BDM;
import com.bits.lib.dx.JBSQL;
import com.bits.lib.security.BAuthMgr;
import com.borland.dx.dataset.DataSetView;
import com.borland.dx.sql.dataset.QueryDataSet;
import com.borland.dx.sql.dataset.QueryDescriptor;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import org.openide.util.Exceptions;

/**
 *
 * @author Sigit Sukarman
 */
public class FrmMember extends InternalFrameTrans implements PropertyChangeListener {

    String OBJID = "PGP-TR-06";
    Member member = new Member();
    BdbState state = new BdbState();
    
//    private static DlgMember singleton = null;
    private QueryDataSet qds = new QueryDataSet();
    private DataSetView dsv = new DataSetView();
    private String nama = null;
    private String kode = null;
//    FrmMember member = null;
    
    /**
     * Creates new form FrmMember
     */
    public FrmMember() {
        initComponents();
        initTable();
        refresh();
    }

    private void initTable() {
        jBToolbar1.setState(state);
        jBToolbar1.setObjid(OBJID);
        jBToolbar1.setAuthMgr(BAuthMgr.getDefault());
//        JBDatePicker jbdp = new JBDatePicker();
//        table.getDataSet().getColumn("dob").setItemEditor(new DateCellEditor(jbdp));

        state.addPropertyChangeListener("state", this);
        state.setState(BdbState.stNONE);
    }

    private void initPanel(boolean enable) {
        BUtil.setEnabledPanel(jPanel1, enable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBToolbar1 = new com.bits.lib.dbswing.JBToolbar();
        jFormLabel1 = new com.bits.bee.ui.myswing.JFormLabel();
        jPanel1 = new javax.swing.JPanel();
        jBStatusbar1 = new com.bits.lib.dbswing.JBStatusbar();
        jScrollPane2 = new javax.swing.JScrollPane();
        jBdbTable1 = new com.bits.lib.dbswing.JBdbTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle(org.openide.util.NbBundle.getMessage(FrmMember.class, "FrmMember.title")); // NOI18N

        jBToolbar1.setEnableOpen(false);
        jBToolbar1.setEnablePrint(false);
        jBToolbar1.setEnableRefresh(false);
        jBToolbar1.setEnableVoid(false);
        jBToolbar1.addJBToolbarListener(new com.bits.lib.dbswing.JBToolbarListener() {
            public void toolbarNewPerformed(com.bits.lib.dbswing.JBToolbarEvent evt) {
                jBToolbar1ToolbarNewPerformed(evt);
            }
            public void toolbarOpenPerformed(com.bits.lib.dbswing.JBToolbarEvent evt) {
                jBToolbar1ToolbarOpenPerformed(evt);
            }
            public void toolbarEditPerformed(com.bits.lib.dbswing.JBToolbarEvent evt) {
                jBToolbar1ToolbarEditPerformed(evt);
            }
            public void toolbarSavePerformed(com.bits.lib.dbswing.JBToolbarEvent evt) {
                jBToolbar1ToolbarSavePerformed(evt);
            }
            public void toolbarCancelPerformed(com.bits.lib.dbswing.JBToolbarEvent evt) {
                jBToolbar1ToolbarCancelPerformed(evt);
            }
            public void toolbarDeletePerformed(com.bits.lib.dbswing.JBToolbarEvent evt) {
                jBToolbar1ToolbarDeletePerformed(evt);
            }
            public void toolbarVoidPerformed(com.bits.lib.dbswing.JBToolbarEvent evt) {
            }
            public void toolbarPrintPerformed(com.bits.lib.dbswing.JBToolbarEvent evt) {
            }
            public void toolbarRefreshPerformed(com.bits.lib.dbswing.JBToolbarEvent evt) {
            }
        });

        jFormLabel1.setText(org.openide.util.NbBundle.getMessage(FrmMember.class, "FrmMember.jFormLabel1.text")); // NOI18N

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 273, Short.MAX_VALUE)
        );

        jBdbTable1.setDataSet(member.getDataSet());
        jScrollPane2.setViewportView(jBdbTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBToolbar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jFormLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addComponent(jBStatusbar1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jBToolbar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFormLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBStatusbar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBToolbar1ToolbarCancelPerformed(com.bits.lib.dbswing.JBToolbarEvent evt) {//GEN-FIRST:event_jBToolbar1ToolbarCancelPerformed
        doCancel();
    }//GEN-LAST:event_jBToolbar1ToolbarCancelPerformed

    private void jBToolbar1ToolbarDeletePerformed(com.bits.lib.dbswing.JBToolbarEvent evt) {//GEN-FIRST:event_jBToolbar1ToolbarDeletePerformed
        doDelete();
    }//GEN-LAST:event_jBToolbar1ToolbarDeletePerformed

    private void jBToolbar1ToolbarEditPerformed(com.bits.lib.dbswing.JBToolbarEvent evt) {//GEN-FIRST:event_jBToolbar1ToolbarEditPerformed
        doEdit();
    }//GEN-LAST:event_jBToolbar1ToolbarEditPerformed

    private void jBToolbar1ToolbarNewPerformed(com.bits.lib.dbswing.JBToolbarEvent evt) {//GEN-FIRST:event_jBToolbar1ToolbarNewPerformed
        doNew();
    }//GEN-LAST:event_jBToolbar1ToolbarNewPerformed

    private void jBToolbar1ToolbarOpenPerformed(com.bits.lib.dbswing.JBToolbarEvent evt) {//GEN-FIRST:event_jBToolbar1ToolbarOpenPerformed
        doOpen();
    }//GEN-LAST:event_jBToolbar1ToolbarOpenPerformed

    private void jBToolbar1ToolbarSavePerformed(com.bits.lib.dbswing.JBToolbarEvent evt) {//GEN-FIRST:event_jBToolbar1ToolbarSavePerformed
        doSave();
    }//GEN-LAST:event_jBToolbar1ToolbarSavePerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.bits.lib.dbswing.JBStatusbar jBStatusbar1;
    private com.bits.lib.dbswing.JBToolbar jBToolbar1;
    private com.bits.lib.dbswing.JBdbTable jBdbTable1;
    private com.bits.bee.ui.myswing.JFormLabel jFormLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void doNew() {
//        member.getDataSet().emptyAllRows();
        member.New();
        member.setString("memberid", "AUTO");
        member.setTransCode("PGWP");
        state.setState(BdbState.stNEW);
    }

    @Override
    public void doOpen() {
        DlgBook dlg = DlgBook.getInstance();
        dlg.setVisible(true);
        if (dlg.getSelectedID() != null) {
            try {
                member.LoadID(dlg.getSelectedID());
                state.setState(BdbState.stEDIT);
            } catch (Exception ex) {
                UIMgr.showMessageDialog("Gagal Membuka form open");
                Exceptions.printStackTrace(ex);
            }
        }
    }

    @Override
    public void doEdit() {
//        try {
//            member.LoadID(txtMemberID.getText());
            state.setState(BdbState.stEDIT);
//        } catch (Exception ex) {
//            Exceptions.printStackTrace(ex);
//        }
        
    }

    @Override
    public void doEdit(String id) {
        if (id != null) {
            try {
                member.LoadID(id);
                state.setState(BdbState.stEDIT);
            } catch (Exception ex) {
                Exceptions.printStackTrace(ex);
            }

        }
    }

    @Override
    public void doSave() {
        try {
            member.saveChanges();
            UIMgr.showMessageDialog("Data Berhasil Disimpan");
            state.setState(BdbState.stNONE);
            refresh();
        } catch (Exception ex) {
            UIMgr.showErrorDialog("Error", ex);
        }
    }

    @Override
    public void doCancel() {
        state.setState(BdbState.stNONE);
        refresh();
    }

    @Override
    public void doDelete() {
        member.getDataSet().deleteRow();
        try {
            member.saveChanges();
            UIMgr.showMessageDialog("Data berhasil dihapus");
            state.setState(BdbState.stNONE);
            refresh();
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    @Override
    public void doVoid() {
        
    }

    @Override
    public void doPrint() {

    }

    @Override
    public void doRefresh() {
        
    }

    @Override
    public void setTransState(int state) {
        this.state.setState(state);
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equalsIgnoreCase("state")) {
            if (state.getState() == BdbState.stNEW || state.getState() == BdbState.stEDIT) {
                initPanel(true);
                jBdbTable1.setEditable(true);
                
            } else {
                jBdbTable1.setEditable(false);
                initPanel(false);
            }
            refresh();
        }
    }
    
    private void refresh(){
        StringBuffer sql = new StringBuffer();
        StringBuffer filter = new StringBuffer();
        sql.append("Select memberid, membername FROM member");
        
        if(kode!=null){
            JBSQL.ANDFilter(filter, JBSQL.filterUpperLike("memberid", kode));
        }
        
        if (nama!=null){
            JBSQL.ANDFilter(filter, JBSQL.filterUpperLike("membername", nama));
        }
        
        JBSQL.setWHERE(sql, filter);
        JBSQL.setGROUPBY(sql, "membername, memberid");
        
        if (qds.isOpen()){
            qds.close();
        }
        qds.setQuery(new QueryDescriptor(BDM.getDefault().getDatabase(), sql.toString()));
        qds.open();
        
//        initTable();
        
        if (dsv.isOpen()){
            dsv.close();
        }
        dsv.setStorageDataSet(qds.getStorageDataSet());
        
        kode=null;
        nama=null;
    }
}
